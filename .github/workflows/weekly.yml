name: weekly

on:
  schedule:
    - cron: "0 9 * * 2"   # Martes 09:00 UTC
  workflow_dispatch: {}

concurrency:
  group: weekly-${{ github.ref }}
  cancel-in-progress: true

# Variables compartidas para todos los jobs
env:
  YEARS_START: "2021"
  YEARS_END: "2024"
  APISPORTS_THROTTLE_MS: "220"    # ~4.5 req/seg
  APISPORTS_CONCURRENCY: "10"     # workers
  WINDOW_DAYS: "30"               # tama√±o de ventana para soccer

jobs:
  backfill-year:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        year: [2021, 2022, 2023, 2024]
    timeout-minutes: 45
    env:
      APISPORTS_KEY: ${{ secrets.APISPORTS_KEY }}
      YEAR: ${{ matrix.year }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Preflight APISports
        run: |
          [ -n "$APISPORTS_KEY" ] && echo "APISPORTS_KEY: OK" || (echo "::error::APISPORTS_KEY faltante" && exit 1)

      - name: Backfill a√±o ${{ matrix.year }} (mes seg√∫n semana ISO)
        shell: bash
        run: |
          set -e
          WEEK=$(date -u +%V)
          M=$(( (10#$WEEK % 12) + 1 ))
          START=$(date -u -d "${YEAR}-${M}-01" +%F)
          END=$(date -u -d "$START +1 month -1 day" +%F)
          echo "Year=$YEAR  Month=$M  Range=$START..$END"
          echo "CONC=${APISPORTS_CONCURRENCY}  THROTTLE=${APISPORTS_THROTTLE_MS}ms  WINDOW=${WINDOW_DAYS}d"

          # Soccer (from/to; comprimido .json.gz)
          python pipelines/backfill.py --sport soccer \
            --start "$START" --end "$END" \
            --window-days "${WINDOW_DAYS}" \
            --concurrency "${APISPORTS_CONCURRENCY}" \
            --throttle-ms "${APISPORTS_THROTTLE_MS}" || true

          # Otros deportes (d√≠a a d√≠a; comprimido .json.gz)
          python pipelines/backfill.py --sport mlb,nfl,nba,nhl \
            --start "$START" --end "$END" \
            --concurrency "${APISPORTS_CONCURRENCY}" \
            --throttle-ms "${APISPORTS_THROTTLE_MS}" || true

      - name: Upload partial indexes
        uses: actions/upload-artifact@v4
        with:
          name: historical-index-${{ matrix.year }}
          path: data/historical/**/index.csv

  post-weekly:
    runs-on: ubuntu-latest
    needs: backfill-year
    timeout-minutes: 45
    env:
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      HF_TOKEN: ${{ secrets.HF_TOKEN }}
      GSHEET_ID: ${{ secrets.GSHEET_ID }}
      GCP_SA_JSON: ${{ secrets.GCP_SA_JSON }}
      APISPORTS_KEY: ${{ secrets.APISPORTS_KEY }}
      # YEARS_START / YEARS_END se heredan del env de workflow (arriba)

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Rebuild features + recalibraci√≥n
        run: |
          python pipelines/features.py
          python pipelines/recalibrate.py

      - name: Predict + servir
        run: |
          python models/predict.py
          python serving/select_picks.py || true
          python serving/parlay_builder.py || true

      - name: Progreso de hist√≥ricos (porcentaje por deporte)
        run: |
          python pipelines/progress.py --years-start "$YEARS_START" --years-end "$YEARS_END"
          echo "Resumen progreso:"
          cat reports/historical_progress.csv || true

      - name: Upload artifacts (final)
        uses: actions/upload-artifact@v4
        with:
          name: weekly-outputs
          path: |
            reports/
            data/historical/**/index.csv

      - name: Notify Telegram (progreso)
        run: |
          set -e
          if [ -n "$TELEGRAM_BOT_TOKEN" ] && [ -n "$TELEGRAM_CHAT_ID" ]; then
            SUMMARY=$(tail -n +2 reports/historical_progress.csv | awk -F, '{printf "‚Ä¢ %s: %.1f%% (%s/%s)\\n", $1, $4, $2, $3}')
            MSG="üìä Progreso hist√≥ricos (objetivo ${YEARS_START}-${YEARS_END})%0A${SUMMARY}"
            curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
              -d chat_id="${TELEGRAM_CHAT_ID}" \
              -d parse_mode="HTML" \
              --data-urlencode "text=${MSG}" >/dev/null 2>&1 || true
          else
            echo "Telegram no configurado; omitiendo notificaci√≥n."
          fi
